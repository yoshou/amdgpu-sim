use crate::bit::*;
use crate::buffer;
use crate::instructions::*;
use crate::rdna_instructions::*;

fn decode_sop1_opcode_rdna4(opcode: u32) -> Result<(I, usize), ()> {
    match opcode as u8 {
        0 => Ok((I::S_MOV_B32, 4)),
        1 => Ok((I::S_MOV_B64, 4)),
        2 => Ok((I::S_CMOV_B32, 4)),
        3 => Ok((I::S_CMOV_B64, 4)),
        4 => Ok((I::S_BREV_B32, 4)),
        5 => Ok((I::S_BREV_B64, 4)),
        8 => Ok((I::S_CTZ_I32_B32, 4)),
        9 => Ok((I::S_CTZ_I32_B64, 4)),
        10 => Ok((I::S_CLZ_I32_U32, 4)),
        11 => Ok((I::S_CLZ_I32_U64, 4)),
        12 => Ok((I::S_CLS_I32, 4)),
        13 => Ok((I::S_CLS_I32_I64, 4)),
        14 => Ok((I::S_SEXT_I32_I8, 4)),
        15 => Ok((I::S_SEXT_I32_I16, 4)),
        16 => Ok((I::S_BITSET0_B32, 4)),
        17 => Ok((I::S_BITSET0_B64, 4)),
        18 => Ok((I::S_BITSET1_B32, 4)),
        19 => Ok((I::S_BITSET1_B64, 4)),
        20 => Ok((I::S_BITREPLICATE_B64_B32, 4)),
        21 => Ok((I::S_ABS_I32, 4)),
        22 => Ok((I::S_BCNT0_I32_B32, 4)),
        23 => Ok((I::S_BCNT0_I32_B64, 4)),
        24 => Ok((I::S_BCNT1_I32_B32, 4)),
        25 => Ok((I::S_BCNT1_I32_B64, 4)),
        26 => Ok((I::S_QUADMASK_B32, 4)),
        27 => Ok((I::S_QUADMASK_B64, 4)),
        28 => Ok((I::S_WQM_B32, 4)),
        29 => Ok((I::S_WQM_B64, 4)),
        30 => Ok((I::S_NOT_B32, 4)),
        31 => Ok((I::S_NOT_B64, 4)),
        32 => Ok((I::S_AND_SAVEEXEC_B32, 4)),
        33 => Ok((I::S_AND_SAVEEXEC_B64, 4)),
        34 => Ok((I::S_OR_SAVEEXEC_B32, 4)),
        35 => Ok((I::S_OR_SAVEEXEC_B64, 4)),
        36 => Ok((I::S_XOR_SAVEEXEC_B32, 4)),
        37 => Ok((I::S_XOR_SAVEEXEC_B64, 4)),
        38 => Ok((I::S_NAND_SAVEEXEC_B32, 4)),
        39 => Ok((I::S_NAND_SAVEEXEC_B64, 4)),
        40 => Ok((I::S_NOR_SAVEEXEC_B32, 4)),
        41 => Ok((I::S_NOR_SAVEEXEC_B64, 4)),
        42 => Ok((I::S_XNOR_SAVEEXEC_B32, 4)),
        43 => Ok((I::S_XNOR_SAVEEXEC_B64, 4)),
        44 => Ok((I::S_AND_NOT0_SAVEEXEC_B32, 4)),
        45 => Ok((I::S_AND_NOT0_SAVEEXEC_B64, 4)),
        46 => Ok((I::S_OR_NOT0_SAVEEXEC_B32, 4)),
        47 => Ok((I::S_OR_NOT0_SAVEEXEC_B64, 4)),
        48 => Ok((I::S_AND_NOT1_SAVEEXEC_B32, 4)),
        49 => Ok((I::S_AND_NOT1_SAVEEXEC_B64, 4)),
        50 => Ok((I::S_OR_NOT1_SAVEEXEC_B32, 4)),
        51 => Ok((I::S_OR_NOT1_SAVEEXEC_B64, 4)),
        52 => Ok((I::S_AND_NOT0_WREXEC_B32, 4)),
        53 => Ok((I::S_AND_NOT0_WREXEC_B64, 4)),
        54 => Ok((I::S_AND_NOT1_WREXEC_B32, 4)),
        55 => Ok((I::S_AND_NOT1_WREXEC_B64, 4)),
        64 => Ok((I::S_MOVRELS_B32, 4)),
        65 => Ok((I::S_MOVRELS_B64, 4)),
        66 => Ok((I::S_MOVRELD_B32, 4)),
        67 => Ok((I::S_MOVRELD_B64, 4)),
        68 => Ok((I::S_MOVRELSD_2_B32, 4)),
        71 => Ok((I::S_GETPC_B64, 4)),
        72 => Ok((I::S_SETPC_B64, 4)),
        73 => Ok((I::S_SWAPPC_B64, 4)),
        74 => Ok((I::S_RFE_B64, 4)),
        76 => Ok((I::S_SENDMSG_RTN_B32, 4)),
        77 => Ok((I::S_SENDMSG_RTN_B64, 4)),
        78 => Ok((I::S_BARRIER_SIGNAL, 4)),
        79 => Ok((I::S_BARRIER_SIGNAL_ISFIRST, 4)),
        80 => Ok((I::S_GET_BARRIER_STATE, 4)),
        83 => Ok((I::S_ALLOC_VGPR, 4)),
        88 => Ok((I::S_SLEEP_VAR, 4)),
        96 => Ok((I::S_CEIL_F32, 4)),
        97 => Ok((I::S_FLOOR_F32, 4)),
        98 => Ok((I::S_TRUNC_F32, 4)),
        99 => Ok((I::S_RNDNE_F32, 4)),
        100 => Ok((I::S_CVT_F32_I32, 4)),
        101 => Ok((I::S_CVT_F32_U32, 4)),
        102 => Ok((I::S_CVT_I32_F32, 4)),
        103 => Ok((I::S_CVT_U32_F32, 4)),
        104 => Ok((I::S_CVT_F16_F32, 4)),
        105 => Ok((I::S_CVT_F32_F16, 4)),
        106 => Ok((I::S_CVT_HI_F32_F16, 4)),
        107 => Ok((I::S_CEIL_F16, 4)),
        108 => Ok((I::S_FLOOR_F16, 4)),
        109 => Ok((I::S_TRUNC_F16, 4)),
        110 => Ok((I::S_RNDNE_F16, 4)),
        _ => Err(()),
    }
}

fn decode_sop2_opcode_rdna4(opcode: u32) -> Result<(I, usize), ()> {
    match opcode as u8 {
        0 => Ok((I::S_ADD_CO_U32, 4)),
        1 => Ok((I::S_SUB_CO_U32, 4)),
        2 => Ok((I::S_ADD_CO_I32, 4)),
        3 => Ok((I::S_SUB_CO_I32, 4)),
        4 => Ok((I::S_ADD_CO_CI_U32, 4)),
        5 => Ok((I::S_SUB_CO_CI_U32, 4)),
        6 => Ok((I::S_ABSDIFF_I32, 4)),
        8 => Ok((I::S_LSHL_B32, 4)),
        9 => Ok((I::S_LSHL_B64, 4)),
        10 => Ok((I::S_LSHR_B32, 4)),
        11 => Ok((I::S_LSHR_B64, 4)),
        12 => Ok((I::S_ASHR_I32, 4)),
        13 => Ok((I::S_ASHR_I64, 4)),
        14 => Ok((I::S_LSHL1_ADD_U32, 4)),
        15 => Ok((I::S_LSHL2_ADD_U32, 4)),
        16 => Ok((I::S_LSHL3_ADD_U32, 4)),
        17 => Ok((I::S_LSHL4_ADD_U32, 4)),
        18 => Ok((I::S_MIN_I32, 4)),
        19 => Ok((I::S_MIN_U32, 4)),
        20 => Ok((I::S_MAX_I32, 4)),
        21 => Ok((I::S_MAX_U32, 4)),
        22 => Ok((I::S_AND_B32, 4)),
        23 => Ok((I::S_AND_B64, 4)),
        24 => Ok((I::S_OR_B32, 4)),
        25 => Ok((I::S_OR_B64, 4)),
        26 => Ok((I::S_XOR_B32, 4)),
        27 => Ok((I::S_XOR_B64, 4)),
        28 => Ok((I::S_NAND_B32, 4)),
        29 => Ok((I::S_NAND_B64, 4)),
        30 => Ok((I::S_NOR_B32, 4)),
        31 => Ok((I::S_NOR_B64, 4)),
        32 => Ok((I::S_XNOR_B32, 4)),
        33 => Ok((I::S_XNOR_B64, 4)),
        34 => Ok((I::S_AND_NOT1_B32, 4)),
        35 => Ok((I::S_AND_NOT1_B64, 4)),
        36 => Ok((I::S_OR_NOT1_B32, 4)),
        37 => Ok((I::S_OR_NOT1_B64, 4)),
        38 => Ok((I::S_BFE_U32, 4)),
        39 => Ok((I::S_BFE_I32, 4)),
        40 => Ok((I::S_BFE_U64, 4)),
        41 => Ok((I::S_BFE_I64, 4)),
        42 => Ok((I::S_BFM_B32, 4)),
        43 => Ok((I::S_BFM_B64, 4)),
        44 => Ok((I::S_MUL_I32, 4)),
        45 => Ok((I::S_MUL_HI_U32, 4)),
        46 => Ok((I::S_MUL_HI_I32, 4)),
        48 => Ok((I::S_CSELECT_B32, 4)),
        49 => Ok((I::S_CSELECT_B64, 4)),
        50 => Ok((I::S_PACK_LL_B32_B16, 4)),
        51 => Ok((I::S_PACK_LH_B32_B16, 4)),
        52 => Ok((I::S_PACK_HH_B32_B16, 4)),
        53 => Ok((I::S_PACK_HL_B32_B16, 4)),
        64 => Ok((I::S_ADD_F32, 4)),
        65 => Ok((I::S_SUB_F32, 4)),
        66 => Ok((I::S_MIN_NUM_F32, 4)),
        67 => Ok((I::S_MAX_NUM_F32, 4)),
        68 => Ok((I::S_MUL_F32, 4)),
        69 => Ok((I::S_FMAAK_F32, 4)),
        70 => Ok((I::S_FMAMK_F32, 4)),
        71 => Ok((I::S_FMAC_F32, 4)),
        72 => Ok((I::S_CVT_PK_RTZ_F16_F32, 4)),
        73 => Ok((I::S_ADD_F16, 4)),
        74 => Ok((I::S_SUB_F16, 4)),
        75 => Ok((I::S_MIN_NUM_F16, 4)),
        76 => Ok((I::S_MAX_NUM_F16, 4)),
        77 => Ok((I::S_MUL_F16, 4)),
        78 => Ok((I::S_FMAC_F16, 4)),
        79 => Ok((I::S_MINIMUM_F32, 4)),
        80 => Ok((I::S_MAXIMUM_F32, 4)),
        81 => Ok((I::S_MINIMUM_F16, 4)),
        82 => Ok((I::S_MAXIMUM_F16, 4)),
        83 => Ok((I::S_ADD_NC_U64, 4)),
        84 => Ok((I::S_SUB_NC_U64, 4)),
        85 => Ok((I::S_MUL_U64, 4)),
        _ => Err(()),
    }
}

fn decode_sopk_opcode_rdna4(opcode: u32) -> Result<(I, usize), ()> {
    match opcode as u8 {
        _ => Err(()),
    }
}

fn decode_sopc_opcode_rdna4(opcode: u32) -> Result<(I, usize), ()> {
    match opcode as u8 {
        0 => Ok((I::S_CMP_EQ_I32, 4)),
        1 => Ok((I::S_CMP_LG_I32, 4)),
        2 => Ok((I::S_CMP_GT_I32, 4)),
        3 => Ok((I::S_CMP_GE_I32, 4)),
        4 => Ok((I::S_CMP_LT_I32, 4)),
        5 => Ok((I::S_CMP_LE_I32, 4)),
        6 => Ok((I::S_CMP_EQ_U32, 4)),
        7 => Ok((I::S_CMP_LG_U32, 4)),
        8 => Ok((I::S_CMP_GT_U32, 4)),
        9 => Ok((I::S_CMP_GE_U32, 4)),
        10 => Ok((I::S_CMP_LT_U32, 4)),
        11 => Ok((I::S_CMP_LE_U32, 4)),
        12 => Ok((I::S_BITCMP0_B32, 4)),
        13 => Ok((I::S_BITCMP1_B32, 4)),
        14 => Ok((I::S_BITCMP0_B64, 4)),
        15 => Ok((I::S_BITCMP1_B64, 4)),
        16 => Ok((I::S_CMP_EQ_U64, 4)),
        17 => Ok((I::S_CMP_LG_U64, 4)),
        65 => Ok((I::S_CMP_LT_F32, 4)),
        66 => Ok((I::S_CMP_EQ_F32, 4)),
        67 => Ok((I::S_CMP_LE_F32, 4)),
        68 => Ok((I::S_CMP_GT_F32, 4)),
        69 => Ok((I::S_CMP_LG_F32, 4)),
        70 => Ok((I::S_CMP_GE_F32, 4)),
        71 => Ok((I::S_CMP_O_F32, 4)),
        72 => Ok((I::S_CMP_U_F32, 4)),
        73 => Ok((I::S_CMP_NGE_F32, 4)),
        74 => Ok((I::S_CMP_NLG_F32, 4)),
        75 => Ok((I::S_CMP_NGT_F32, 4)),
        76 => Ok((I::S_CMP_NLE_F32, 4)),
        77 => Ok((I::S_CMP_NEQ_F32, 4)),
        78 => Ok((I::S_CMP_NLT_F32, 4)),
        81 => Ok((I::S_CMP_LT_F16, 4)),
        82 => Ok((I::S_CMP_EQ_F16, 4)),
        83 => Ok((I::S_CMP_LE_F16, 4)),
        84 => Ok((I::S_CMP_GT_F16, 4)),
        85 => Ok((I::S_CMP_LG_F16, 4)),
        86 => Ok((I::S_CMP_GE_F16, 4)),
        87 => Ok((I::S_CMP_O_F16, 4)),
        88 => Ok((I::S_CMP_U_F16, 4)),
        89 => Ok((I::S_CMP_NGE_F16, 4)),
        90 => Ok((I::S_CMP_NLG_F16, 4)),
        91 => Ok((I::S_CMP_NGT_F16, 4)),
        92 => Ok((I::S_CMP_NLE_F16, 4)),
        93 => Ok((I::S_CMP_NEQ_F16, 4)),
        94 => Ok((I::S_CMP_NLT_F16, 4)),
        _ => Err(()),
    }
}

fn decode_sopp_opcode_rdna4(opcode: u32) -> Result<(I, usize), ()> {
    match opcode as u8 {
        0 => Ok((I::S_NOP, 4)),
        1 => Ok((I::S_SETKILL, 4)),
        2 => Ok((I::S_SETHALT, 4)),
        3 => Ok((I::S_SLEEP, 4)),
        5 => Ok((I::S_CLAUSE, 4)),
        7 => Ok((I::S_DELAY_ALU, 4)),
        8 => Ok((I::S_WAIT_ALU, 4)),
        9 => Ok((I::S_WAITCNT, 4)),
        10 => Ok((I::S_WAIT_IDLE, 4)),
        11 => Ok((I::S_WAIT_EVENT, 4)),
        16 => Ok((I::S_TRAP, 4)),
        17 => Ok((I::S_ROUND_MODE, 4)),
        18 => Ok((I::S_DENORM_MODE, 4)),
        20 => Ok((I::S_BARRIER_WAIT, 4)),
        31 => Ok((I::S_CODE_END, 4)),
        32 => Ok((I::S_BRANCH, 4)),
        33 => Ok((I::S_CBRANCH_SCC0, 4)),
        34 => Ok((I::S_CBRANCH_SCC1, 4)),
        35 => Ok((I::S_CBRANCH_VCCZ, 4)),
        36 => Ok((I::S_CBRANCH_VCCNZ, 4)),
        37 => Ok((I::S_CBRANCH_EXECZ, 4)),
        38 => Ok((I::S_CBRANCH_EXECNZ, 4)),
        48 => Ok((I::S_ENDPGM, 4)),
        49 => Ok((I::S_ENDPGM_SAVED, 4)),
        52 => Ok((I::S_WAKEUP, 4)),
        53 => Ok((I::S_SETPRIO, 4)),
        54 => Ok((I::S_SENDMSG, 4)),
        55 => Ok((I::S_SENDMSGHALT, 4)),
        56 => Ok((I::S_INCPERFLEVEL, 4)),
        57 => Ok((I::S_DECPERFLEVEL, 4)),
        60 => Ok((I::S_ICACHE_INV, 4)),
        64 => Ok((I::S_WAIT_LOADCNT, 4)),
        65 => Ok((I::S_WAIT_STORECNT, 4)),
        66 => Ok((I::S_WAIT_SAMPLECNT, 4)),
        67 => Ok((I::S_WAIT_BVHCNT, 4)),
        68 => Ok((I::S_WAIT_EXPCNT, 4)),
        70 => Ok((I::S_WAIT_DSCNT, 4)),
        71 => Ok((I::S_WAIT_KMCNT, 4)),
        72 => Ok((I::S_WAIT_LOADCNT_DSCNT, 4)),
        73 => Ok((I::S_WAIT_STORECNT_DSCNT, 4)),
        _ => Err(()),
    }
}

fn decode_vop1_opcode_rdna4(opcode: u32) -> Result<(I, usize), ()> {
    match opcode {
        0 => Ok((I::V_NOP, 4)),
        1 => Ok((I::V_MOV_B32, 4)),
        2 => Ok((I::V_READFIRSTLANE_B32, 4)),
        3 => Ok((I::V_CVT_I32_F64, 4)),
        4 => Ok((I::V_CVT_F64_I32, 4)),
        5 => Ok((I::V_CVT_F32_I32, 4)),
        6 => Ok((I::V_CVT_F32_U32, 4)),
        7 => Ok((I::V_CVT_U32_F32, 4)),
        8 => Ok((I::V_CVT_I32_F32, 4)),
        10 => Ok((I::V_CVT_F16_F32, 4)),
        11 => Ok((I::V_CVT_F32_F16, 4)),
        12 => Ok((I::V_CVT_NEAREST_I32_F32, 4)),
        13 => Ok((I::V_CVT_FLOOR_I32_F32, 4)),
        14 => Ok((I::V_CVT_OFF_F32_I4, 4)),
        15 => Ok((I::V_CVT_F32_F64, 4)),
        16 => Ok((I::V_CVT_F64_F32, 4)),
        17 => Ok((I::V_CVT_F32_UBYTE0, 4)),
        18 => Ok((I::V_CVT_F32_UBYTE1, 4)),
        19 => Ok((I::V_CVT_F32_UBYTE2, 4)),
        20 => Ok((I::V_CVT_F32_UBYTE3, 4)),
        21 => Ok((I::V_CVT_U32_F64, 4)),
        22 => Ok((I::V_CVT_F64_U32, 4)),
        23 => Ok((I::V_TRUNC_F64, 4)),
        24 => Ok((I::V_CEIL_F64, 4)),
        25 => Ok((I::V_RNDNE_F64, 4)),
        26 => Ok((I::V_FLOOR_F64, 4)),
        27 => Ok((I::V_PIPEFLUSH, 4)),
        28 => Ok((I::V_MOV_B16, 4)),
        32 => Ok((I::V_FRACT_F32, 4)),
        33 => Ok((I::V_TRUNC_F32, 4)),
        34 => Ok((I::V_CEIL_F32, 4)),
        35 => Ok((I::V_RNDNE_F32, 4)),
        36 => Ok((I::V_FLOOR_F32, 4)),
        37 => Ok((I::V_EXP_F32, 4)),
        39 => Ok((I::V_LOG_F32, 4)),
        42 => Ok((I::V_RCP_F32, 4)),
        43 => Ok((I::V_RCP_IFLAG_F32, 4)),
        46 => Ok((I::V_RSQ_F32, 4)),
        47 => Ok((I::V_RCP_F64, 4)),
        49 => Ok((I::V_RSQ_F64, 4)),
        51 => Ok((I::V_SQRT_F32, 4)),
        52 => Ok((I::V_SQRT_F64, 4)),
        53 => Ok((I::V_SIN_F32, 4)),
        54 => Ok((I::V_COS_F32, 4)),
        55 => Ok((I::V_NOT_B32, 4)),
        56 => Ok((I::V_BFREV_B32, 4)),
        57 => Ok((I::V_CLZ_I32_U32, 4)),
        58 => Ok((I::V_CTZ_I32_B32, 4)),
        59 => Ok((I::V_CLS_I32, 4)),
        60 => Ok((I::V_FREXP_EXP_I32_F64, 4)),
        61 => Ok((I::V_FREXP_MANT_F64, 4)),
        62 => Ok((I::V_FRACT_F64, 4)),
        63 => Ok((I::V_FREXP_EXP_I32_F32, 4)),
        64 => Ok((I::V_FREXP_MANT_F32, 4)),
        66 => Ok((I::V_MOVRELD_B32, 4)),
        67 => Ok((I::V_MOVRELS_B32, 4)),
        68 => Ok((I::V_MOVRELSD_B32, 4)),
        72 => Ok((I::V_MOVRELSD_2_B32, 4)),
        80 => Ok((I::V_CVT_F16_U16, 4)),
        81 => Ok((I::V_CVT_F16_I16, 4)),
        82 => Ok((I::V_CVT_U16_F16, 4)),
        83 => Ok((I::V_CVT_I16_F16, 4)),
        84 => Ok((I::V_RCP_F16, 4)),
        85 => Ok((I::V_SQRT_F16, 4)),
        86 => Ok((I::V_RSQ_F16, 4)),
        87 => Ok((I::V_LOG_F16, 4)),
        88 => Ok((I::V_EXP_F16, 4)),
        89 => Ok((I::V_FREXP_MANT_F16, 4)),
        90 => Ok((I::V_FREXP_EXP_I16_F16, 4)),
        91 => Ok((I::V_FLOOR_F16, 4)),
        92 => Ok((I::V_CEIL_F16, 4)),
        93 => Ok((I::V_TRUNC_F16, 4)),
        94 => Ok((I::V_RNDNE_F16, 4)),
        95 => Ok((I::V_FRACT_F16, 4)),
        96 => Ok((I::V_SIN_F16, 4)),
        97 => Ok((I::V_COS_F16, 4)),
        98 => Ok((I::V_SAT_PK_U8_I16, 4)),
        99 => Ok((I::V_CVT_NORM_I16_F16, 4)),
        100 => Ok((I::V_CVT_NORM_U16_F16, 4)),
        101 => Ok((I::V_SWAP_B32, 4)),
        102 => Ok((I::V_SWAP_B16, 4)),
        103 => Ok((I::V_PERMLANE64_B32, 4)),
        104 => Ok((I::V_SWAPREL_B32, 4)),
        105 => Ok((I::V_NOT_B16, 4)),
        106 => Ok((I::V_CVT_I32_I16, 4)),
        107 => Ok((I::V_CVT_U32_U16, 4)),
        108 => Ok((I::V_CVT_F32_FP8, 4)),
        109 => Ok((I::V_CVT_F32_BF8, 4)),
        110 => Ok((I::V_CVT_PK_F32_FP8, 4)),
        111 => Ok((I::V_CVT_PK_F32_BF8, 4)),
        _ => Err(()),
    }
}

fn decode_vop2_opcode_rdna4(opcode: u32) -> Result<(I, usize), ()> {
    match opcode {
        1 => Ok((I::V_CNDMASK_B32, 4)),
        2 => Ok((I::V_ADD_F64, 4)),
        3 => Ok((I::V_ADD_F32, 4)),
        4 => Ok((I::V_SUB_F32, 4)),
        5 => Ok((I::V_SUBREV_F32, 4)),
        6 => Ok((I::V_MUL_F64, 4)),
        7 => Ok((I::V_MUL_DX9_ZERO_F32, 4)),
        8 => Ok((I::V_MUL_F32, 4)),
        9 => Ok((I::V_MUL_I32_I24, 4)),
        10 => Ok((I::V_MUL_HI_I32_I24, 4)),
        11 => Ok((I::V_MUL_U32_U24, 4)),
        12 => Ok((I::V_MUL_HI_U32_U24, 4)),
        13 => Ok((I::V_MIN_NUM_F64, 4)),
        14 => Ok((I::V_MAX_NUM_F64, 4)),
        17 => Ok((I::V_MIN_I32, 4)),
        18 => Ok((I::V_MAX_I32, 4)),
        19 => Ok((I::V_MIN_U32, 4)),
        20 => Ok((I::V_MAX_U32, 4)),
        21 => Ok((I::V_MIN_NUM_F32, 4)),
        22 => Ok((I::V_MAX_NUM_F32, 4)),
        24 => Ok((I::V_LSHLREV_B32, 4)),
        25 => Ok((I::V_LSHRREV_B32, 4)),
        26 => Ok((I::V_ASHRREV_I32, 4)),
        27 => Ok((I::V_AND_B32, 4)),
        28 => Ok((I::V_OR_B32, 4)),
        29 => Ok((I::V_XOR_B32, 4)),
        30 => Ok((I::V_XNOR_B32, 4)),
        31 => Ok((I::V_LSHLREV_B64, 4)),
        32 => Ok((I::V_ADD_CO_CI_U32, 4)),
        33 => Ok((I::V_SUB_CO_CI_U32, 4)),
        34 => Ok((I::V_SUBREV_CO_CI_U32, 4)),
        37 => Ok((I::V_ADD_NC_U32, 4)),
        38 => Ok((I::V_SUB_NC_U32, 4)),
        39 => Ok((I::V_SUBREV_NC_U32, 4)),
        43 => Ok((I::V_FMAC_F32, 4)),
        44 => Ok((I::V_FMAMK_F32, 4)),
        45 => Ok((I::V_FMAAK_F32, 4)),
        47 => Ok((I::V_CVT_PK_RTZ_F16_F32, 4)),
        48 => Ok((I::V_MIN_NUM_F16, 4)),
        49 => Ok((I::V_MAX_NUM_F16, 4)),
        50 => Ok((I::V_ADD_F16, 4)),
        51 => Ok((I::V_SUB_F16, 4)),
        52 => Ok((I::V_SUBREV_F16, 4)),
        53 => Ok((I::V_MUL_F16, 4)),
        54 => Ok((I::V_FMAC_F16, 4)),
        55 => Ok((I::V_FMAMK_F16, 4)),
        56 => Ok((I::V_FMAAK_F16, 4)),
        59 => Ok((I::V_LDEXP_F16, 4)),
        60 => Ok((I::V_PK_FMAC_F16, 4)),
        _ => Err(()),
    }
}

fn decode_vop3_opcode_rdna4(opcode: u32) -> Result<(I, usize), ()> {
    match opcode {
        1 => Ok((I::V_CMP_LT_F16, 8)),
        2 => Ok((I::V_CMP_EQ_F16, 8)),
        3 => Ok((I::V_CMP_LE_F16, 8)),
        4 => Ok((I::V_CMP_GT_F16, 8)),
        5 => Ok((I::V_CMP_LG_F16, 8)),
        6 => Ok((I::V_CMP_GE_F16, 8)),
        7 => Ok((I::V_CMP_O_F16, 8)),
        8 => Ok((I::V_CMP_U_F16, 8)),
        9 => Ok((I::V_CMP_NGE_F16, 8)),
        10 => Ok((I::V_CMP_NLG_F16, 8)),
        11 => Ok((I::V_CMP_NGT_F16, 8)),
        12 => Ok((I::V_CMP_NLE_F16, 8)),
        13 => Ok((I::V_CMP_NEQ_F16, 8)),
        14 => Ok((I::V_CMP_NLT_F16, 8)),
        17 => Ok((I::V_CMP_LT_F32, 8)),
        18 => Ok((I::V_CMP_EQ_F32, 8)),
        19 => Ok((I::V_CMP_LE_F32, 8)),
        20 => Ok((I::V_CMP_GT_F32, 8)),
        21 => Ok((I::V_CMP_LG_F32, 8)),
        22 => Ok((I::V_CMP_GE_F32, 8)),
        23 => Ok((I::V_CMP_O_F32, 8)),
        24 => Ok((I::V_CMP_U_F32, 8)),
        25 => Ok((I::V_CMP_NGE_F32, 8)),
        26 => Ok((I::V_CMP_NLG_F32, 8)),
        27 => Ok((I::V_CMP_NGT_F32, 8)),
        28 => Ok((I::V_CMP_NLE_F32, 8)),
        29 => Ok((I::V_CMP_NEQ_F32, 8)),
        30 => Ok((I::V_CMP_NLT_F32, 8)),
        33 => Ok((I::V_CMP_LT_F64, 8)),
        34 => Ok((I::V_CMP_EQ_F64, 8)),
        35 => Ok((I::V_CMP_LE_F64, 8)),
        36 => Ok((I::V_CMP_GT_F64, 8)),
        37 => Ok((I::V_CMP_LG_F64, 8)),
        38 => Ok((I::V_CMP_GE_F64, 8)),
        39 => Ok((I::V_CMP_O_F64, 8)),
        40 => Ok((I::V_CMP_U_F64, 8)),
        41 => Ok((I::V_CMP_NGE_F64, 8)),
        42 => Ok((I::V_CMP_NLG_F64, 8)),
        43 => Ok((I::V_CMP_NGT_F64, 8)),
        44 => Ok((I::V_CMP_NLE_F64, 8)),
        45 => Ok((I::V_CMP_NEQ_F64, 8)),
        46 => Ok((I::V_CMP_NLT_F64, 8)),
        49 => Ok((I::V_CMP_LT_I16, 8)),
        50 => Ok((I::V_CMP_EQ_I16, 8)),
        51 => Ok((I::V_CMP_LE_I16, 8)),
        52 => Ok((I::V_CMP_GT_I16, 8)),
        53 => Ok((I::V_CMP_NE_I16, 8)),
        54 => Ok((I::V_CMP_GE_I16, 8)),
        57 => Ok((I::V_CMP_LT_U16, 8)),
        58 => Ok((I::V_CMP_EQ_U16, 8)),
        59 => Ok((I::V_CMP_LE_U16, 8)),
        60 => Ok((I::V_CMP_GT_U16, 8)),
        61 => Ok((I::V_CMP_NE_U16, 8)),
        62 => Ok((I::V_CMP_GE_U16, 8)),
        65 => Ok((I::V_CMP_LT_I32, 8)),
        66 => Ok((I::V_CMP_EQ_I32, 8)),
        67 => Ok((I::V_CMP_LE_I32, 8)),
        68 => Ok((I::V_CMP_GT_I32, 8)),
        69 => Ok((I::V_CMP_NE_I32, 8)),
        70 => Ok((I::V_CMP_GE_I32, 8)),
        73 => Ok((I::V_CMP_LT_U32, 8)),
        74 => Ok((I::V_CMP_EQ_U32, 8)),
        75 => Ok((I::V_CMP_LE_U32, 8)),
        76 => Ok((I::V_CMP_GT_U32, 8)),
        77 => Ok((I::V_CMP_NE_U32, 8)),
        78 => Ok((I::V_CMP_GE_U32, 8)),
        81 => Ok((I::V_CMP_LT_I64, 8)),
        82 => Ok((I::V_CMP_EQ_I64, 8)),
        83 => Ok((I::V_CMP_LE_I64, 8)),
        84 => Ok((I::V_CMP_GT_I64, 8)),
        85 => Ok((I::V_CMP_NE_I64, 8)),
        86 => Ok((I::V_CMP_GE_I64, 8)),
        89 => Ok((I::V_CMP_LT_U64, 8)),
        90 => Ok((I::V_CMP_EQ_U64, 8)),
        91 => Ok((I::V_CMP_LE_U64, 8)),
        92 => Ok((I::V_CMP_GT_U64, 8)),
        93 => Ok((I::V_CMP_NE_U64, 8)),
        94 => Ok((I::V_CMP_GE_U64, 8)),
        125 => Ok((I::V_CMP_CLASS_F16, 8)),
        126 => Ok((I::V_CMP_CLASS_F32, 8)),
        127 => Ok((I::V_CMP_CLASS_F64, 8)),
        129 => Ok((I::V_CMPX_LT_F16, 8)),
        130 => Ok((I::V_CMPX_EQ_F16, 8)),
        131 => Ok((I::V_CMPX_LE_F16, 8)),
        132 => Ok((I::V_CMPX_GT_F16, 8)),
        133 => Ok((I::V_CMPX_LG_F16, 8)),
        134 => Ok((I::V_CMPX_GE_F16, 8)),
        135 => Ok((I::V_CMPX_O_F16, 8)),
        136 => Ok((I::V_CMPX_U_F16, 8)),
        137 => Ok((I::V_CMPX_NGE_F16, 8)),
        138 => Ok((I::V_CMPX_NLG_F16, 8)),
        139 => Ok((I::V_CMPX_NGT_F16, 8)),
        140 => Ok((I::V_CMPX_NLE_F16, 8)),
        141 => Ok((I::V_CMPX_NEQ_F16, 8)),
        142 => Ok((I::V_CMPX_NLT_F16, 8)),
        145 => Ok((I::V_CMPX_LT_F32, 8)),
        146 => Ok((I::V_CMPX_EQ_F32, 8)),
        147 => Ok((I::V_CMPX_LE_F32, 8)),
        148 => Ok((I::V_CMPX_GT_F32, 8)),
        149 => Ok((I::V_CMPX_LG_F32, 8)),
        150 => Ok((I::V_CMPX_GE_F32, 8)),
        151 => Ok((I::V_CMPX_O_F32, 8)),
        152 => Ok((I::V_CMPX_U_F32, 8)),
        153 => Ok((I::V_CMPX_NGE_F32, 8)),
        154 => Ok((I::V_CMPX_NLG_F32, 8)),
        155 => Ok((I::V_CMPX_NGT_F32, 8)),
        156 => Ok((I::V_CMPX_NLE_F32, 8)),
        157 => Ok((I::V_CMPX_NEQ_F32, 8)),
        158 => Ok((I::V_CMPX_NLT_F32, 8)),
        161 => Ok((I::V_CMPX_LT_F64, 8)),
        162 => Ok((I::V_CMPX_EQ_F64, 8)),
        163 => Ok((I::V_CMPX_LE_F64, 8)),
        164 => Ok((I::V_CMPX_GT_F64, 8)),
        165 => Ok((I::V_CMPX_LG_F64, 8)),
        166 => Ok((I::V_CMPX_GE_F64, 8)),
        167 => Ok((I::V_CMPX_O_F64, 8)),
        168 => Ok((I::V_CMPX_U_F64, 8)),
        169 => Ok((I::V_CMPX_NGE_F64, 8)),
        170 => Ok((I::V_CMPX_NLG_F64, 8)),
        171 => Ok((I::V_CMPX_NGT_F64, 8)),
        172 => Ok((I::V_CMPX_NLE_F64, 8)),
        173 => Ok((I::V_CMPX_NEQ_F64, 8)),
        174 => Ok((I::V_CMPX_NLT_F64, 8)),
        177 => Ok((I::V_CMPX_LT_I16, 8)),
        178 => Ok((I::V_CMPX_EQ_I16, 8)),
        179 => Ok((I::V_CMPX_LE_I16, 8)),
        180 => Ok((I::V_CMPX_GT_I16, 8)),
        181 => Ok((I::V_CMPX_NE_I16, 8)),
        182 => Ok((I::V_CMPX_GE_I16, 8)),
        185 => Ok((I::V_CMPX_LT_U16, 8)),
        186 => Ok((I::V_CMPX_EQ_U16, 8)),
        187 => Ok((I::V_CMPX_LE_U16, 8)),
        188 => Ok((I::V_CMPX_GT_U16, 8)),
        189 => Ok((I::V_CMPX_NE_U16, 8)),
        190 => Ok((I::V_CMPX_GE_U16, 8)),
        193 => Ok((I::V_CMPX_LT_I32, 8)),
        194 => Ok((I::V_CMPX_EQ_I32, 8)),
        195 => Ok((I::V_CMPX_LE_I32, 8)),
        196 => Ok((I::V_CMPX_GT_I32, 8)),
        197 => Ok((I::V_CMPX_NE_I32, 8)),
        198 => Ok((I::V_CMPX_GE_I32, 8)),
        201 => Ok((I::V_CMPX_LT_U32, 8)),
        202 => Ok((I::V_CMPX_EQ_U32, 8)),
        203 => Ok((I::V_CMPX_LE_U32, 8)),
        204 => Ok((I::V_CMPX_GT_U32, 8)),
        205 => Ok((I::V_CMPX_NE_U32, 8)),
        206 => Ok((I::V_CMPX_GE_U32, 8)),
        209 => Ok((I::V_CMPX_LT_I64, 8)),
        210 => Ok((I::V_CMPX_EQ_I64, 8)),
        211 => Ok((I::V_CMPX_LE_I64, 8)),
        212 => Ok((I::V_CMPX_GT_I64, 8)),
        213 => Ok((I::V_CMPX_NE_I64, 8)),
        214 => Ok((I::V_CMPX_GE_I64, 8)),
        217 => Ok((I::V_CMPX_LT_U64, 8)),
        218 => Ok((I::V_CMPX_EQ_U64, 8)),
        219 => Ok((I::V_CMPX_LE_U64, 8)),
        220 => Ok((I::V_CMPX_GT_U64, 8)),
        221 => Ok((I::V_CMPX_NE_U64, 8)),
        222 => Ok((I::V_CMPX_GE_U64, 8)),
        253 => Ok((I::V_CMPX_CLASS_F16, 8)),
        254 => Ok((I::V_CMPX_CLASS_F32, 8)),
        255 => Ok((I::V_CMPX_CLASS_F64, 8)),
        257 => Ok((I::V_CNDMASK_B32, 8)),
        258 => Ok((I::V_ADD_F64, 8)),
        259 => Ok((I::V_ADD_F32, 8)),
        260 => Ok((I::V_SUB_F32, 8)),
        261 => Ok((I::V_SUBREV_F32, 8)),
        262 => Ok((I::V_MUL_F64, 8)),
        263 => Ok((I::V_MUL_DX9_ZERO_F32, 8)),
        264 => Ok((I::V_MUL_F32, 8)),
        265 => Ok((I::V_MUL_I32_I24, 8)),
        266 => Ok((I::V_MUL_HI_I32_I24, 8)),
        267 => Ok((I::V_MUL_U32_U24, 8)),
        268 => Ok((I::V_MUL_HI_U32_U24, 8)),
        269 => Ok((I::V_MIN_NUM_F64, 8)),
        270 => Ok((I::V_MAX_NUM_F64, 8)),
        273 => Ok((I::V_MIN_I32, 8)),
        274 => Ok((I::V_MAX_I32, 8)),
        275 => Ok((I::V_MIN_U32, 8)),
        276 => Ok((I::V_MAX_U32, 8)),
        277 => Ok((I::V_MIN_NUM_F32, 8)),
        278 => Ok((I::V_MAX_NUM_F32, 8)),
        280 => Ok((I::V_LSHLREV_B32, 8)),
        281 => Ok((I::V_LSHRREV_B32, 8)),
        282 => Ok((I::V_ASHRREV_I32, 8)),
        283 => Ok((I::V_AND_B32, 8)),
        284 => Ok((I::V_OR_B32, 8)),
        285 => Ok((I::V_XOR_B32, 8)),
        286 => Ok((I::V_XNOR_B32, 8)),
        287 => Ok((I::V_LSHLREV_B64, 8)),
        293 => Ok((I::V_ADD_NC_U32, 8)),
        294 => Ok((I::V_SUB_NC_U32, 8)),
        295 => Ok((I::V_SUBREV_NC_U32, 8)),
        299 => Ok((I::V_FMAC_F32, 8)),
        303 => Ok((I::V_CVT_PK_RTZ_F16_F32, 8)),
        304 => Ok((I::V_MIN_NUM_F16, 8)),
        305 => Ok((I::V_MAX_NUM_F16, 8)),
        306 => Ok((I::V_ADD_F16, 8)),
        307 => Ok((I::V_SUB_F16, 8)),
        308 => Ok((I::V_SUBREV_F16, 8)),
        309 => Ok((I::V_MUL_F16, 8)),
        310 => Ok((I::V_FMAC_F16, 8)),
        315 => Ok((I::V_LDEXP_F16, 8)),
        384 => Ok((I::V_NOP, 8)),
        385 => Ok((I::V_MOV_B32, 8)),
        386 => Ok((I::V_READFIRSTLANE_B32, 8)),
        387 => Ok((I::V_CVT_I32_F64, 8)),
        388 => Ok((I::V_CVT_F64_I32, 8)),
        389 => Ok((I::V_CVT_F32_I32, 8)),
        390 => Ok((I::V_CVT_F32_U32, 8)),
        391 => Ok((I::V_CVT_U32_F32, 8)),
        392 => Ok((I::V_CVT_I32_F32, 8)),
        394 => Ok((I::V_CVT_F16_F32, 8)),
        395 => Ok((I::V_CVT_F32_F16, 8)),
        396 => Ok((I::V_CVT_NEAREST_I32_F32, 8)),
        397 => Ok((I::V_CVT_FLOOR_I32_F32, 8)),
        398 => Ok((I::V_CVT_OFF_F32_I4, 8)),
        399 => Ok((I::V_CVT_F32_F64, 8)),
        400 => Ok((I::V_CVT_F64_F32, 8)),
        401 => Ok((I::V_CVT_F32_UBYTE0, 8)),
        402 => Ok((I::V_CVT_F32_UBYTE1, 8)),
        403 => Ok((I::V_CVT_F32_UBYTE2, 8)),
        404 => Ok((I::V_CVT_F32_UBYTE3, 8)),
        405 => Ok((I::V_CVT_U32_F64, 8)),
        406 => Ok((I::V_CVT_F64_U32, 8)),
        407 => Ok((I::V_TRUNC_F64, 8)),
        408 => Ok((I::V_CEIL_F64, 8)),
        409 => Ok((I::V_RNDNE_F64, 8)),
        410 => Ok((I::V_FLOOR_F64, 8)),
        411 => Ok((I::V_PIPEFLUSH, 8)),
        412 => Ok((I::V_MOV_B16, 8)),
        416 => Ok((I::V_FRACT_F32, 8)),
        417 => Ok((I::V_TRUNC_F32, 8)),
        418 => Ok((I::V_CEIL_F32, 8)),
        419 => Ok((I::V_RNDNE_F32, 8)),
        420 => Ok((I::V_FLOOR_F32, 8)),
        421 => Ok((I::V_EXP_F32, 8)),
        423 => Ok((I::V_LOG_F32, 8)),
        426 => Ok((I::V_RCP_F32, 8)),
        427 => Ok((I::V_RCP_IFLAG_F32, 8)),
        430 => Ok((I::V_RSQ_F32, 8)),
        431 => Ok((I::V_RCP_F64, 8)),
        433 => Ok((I::V_RSQ_F64, 8)),
        435 => Ok((I::V_SQRT_F32, 8)),
        436 => Ok((I::V_SQRT_F64, 8)),
        437 => Ok((I::V_SIN_F32, 8)),
        438 => Ok((I::V_COS_F32, 8)),
        439 => Ok((I::V_NOT_B32, 8)),
        440 => Ok((I::V_BFREV_B32, 8)),
        441 => Ok((I::V_CLZ_I32_U32, 8)),
        442 => Ok((I::V_CTZ_I32_B32, 8)),
        443 => Ok((I::V_CLS_I32, 8)),
        444 => Ok((I::V_FREXP_EXP_I32_F64, 8)),
        445 => Ok((I::V_FREXP_MANT_F64, 8)),
        446 => Ok((I::V_FRACT_F64, 8)),
        447 => Ok((I::V_FREXP_EXP_I32_F32, 8)),
        448 => Ok((I::V_FREXP_MANT_F32, 8)),
        450 => Ok((I::V_MOVRELD_B32, 8)),
        451 => Ok((I::V_MOVRELS_B32, 8)),
        452 => Ok((I::V_MOVRELSD_B32, 8)),
        456 => Ok((I::V_MOVRELSD_2_B32, 8)),
        464 => Ok((I::V_CVT_F16_U16, 8)),
        465 => Ok((I::V_CVT_F16_I16, 8)),
        466 => Ok((I::V_CVT_U16_F16, 8)),
        467 => Ok((I::V_CVT_I16_F16, 8)),
        468 => Ok((I::V_RCP_F16, 8)),
        469 => Ok((I::V_SQRT_F16, 8)),
        470 => Ok((I::V_RSQ_F16, 8)),
        471 => Ok((I::V_LOG_F16, 8)),
        472 => Ok((I::V_EXP_F16, 8)),
        473 => Ok((I::V_FREXP_MANT_F16, 8)),
        474 => Ok((I::V_FREXP_EXP_I16_F16, 8)),
        475 => Ok((I::V_FLOOR_F16, 8)),
        476 => Ok((I::V_CEIL_F16, 8)),
        477 => Ok((I::V_TRUNC_F16, 8)),
        478 => Ok((I::V_RNDNE_F16, 8)),
        479 => Ok((I::V_FRACT_F16, 8)),
        480 => Ok((I::V_SIN_F16, 8)),
        481 => Ok((I::V_COS_F16, 8)),
        482 => Ok((I::V_SAT_PK_U8_I16, 8)),
        483 => Ok((I::V_CVT_NORM_I16_F16, 8)),
        484 => Ok((I::V_CVT_NORM_U16_F16, 8)),
        489 => Ok((I::V_NOT_B16, 8)),
        490 => Ok((I::V_CVT_I32_I16, 8)),
        491 => Ok((I::V_CVT_U32_U16, 8)),
        492 => Ok((I::V_CVT_F32_FP8, 8)),
        493 => Ok((I::V_CVT_F32_BF8, 8)),
        494 => Ok((I::V_CVT_PK_F32_FP8, 8)),
        495 => Ok((I::V_CVT_PK_F32_BF8, 8)),
        521 => Ok((I::V_FMA_DX9_ZERO_F32, 8)),
        522 => Ok((I::V_MAD_I32_I24, 8)),
        523 => Ok((I::V_MAD_U32_U24, 8)),
        524 => Ok((I::V_CUBEID_F32, 8)),
        525 => Ok((I::V_CUBESC_F32, 8)),
        526 => Ok((I::V_CUBETC_F32, 8)),
        527 => Ok((I::V_CUBEMA_F32, 8)),
        528 => Ok((I::V_BFE_U32, 8)),
        529 => Ok((I::V_BFE_I32, 8)),
        530 => Ok((I::V_BFI_B32, 8)),
        531 => Ok((I::V_FMA_F32, 8)),
        532 => Ok((I::V_FMA_F64, 8)),
        533 => Ok((I::V_LERP_U8, 8)),
        534 => Ok((I::V_ALIGNBIT_B32, 8)),
        535 => Ok((I::V_ALIGNBYTE_B32, 8)),
        536 => Ok((I::V_MULLIT_F32, 8)),
        538 => Ok((I::V_MIN3_I32, 8)),
        539 => Ok((I::V_MIN3_U32, 8)),
        541 => Ok((I::V_MAX3_I32, 8)),
        542 => Ok((I::V_MAX3_U32, 8)),
        544 => Ok((I::V_MED3_I32, 8)),
        545 => Ok((I::V_MED3_U32, 8)),
        546 => Ok((I::V_SAD_U8, 8)),
        547 => Ok((I::V_SAD_HI_U8, 8)),
        548 => Ok((I::V_SAD_U16, 8)),
        549 => Ok((I::V_SAD_U32, 8)),
        550 => Ok((I::V_CVT_PK_U8_F32, 8)),
        551 => Ok((I::V_DIV_FIXUP_F32, 8)),
        552 => Ok((I::V_DIV_FIXUP_F64, 8)),
        553 => Ok((I::V_MIN3_NUM_F32, 8)),
        554 => Ok((I::V_MAX3_NUM_F32, 8)),
        555 => Ok((I::V_MIN3_NUM_F16, 8)),
        556 => Ok((I::V_MAX3_NUM_F16, 8)),
        557 => Ok((I::V_MINIMUM3_F32, 8)),
        558 => Ok((I::V_MAXIMUM3_F32, 8)),
        559 => Ok((I::V_MINIMUM3_F16, 8)),
        560 => Ok((I::V_MAXIMUM3_F16, 8)),
        561 => Ok((I::V_MED3_NUM_F32, 8)),
        562 => Ok((I::V_MED3_NUM_F16, 8)),
        567 => Ok((I::V_DIV_FMAS_F32, 8)),
        568 => Ok((I::V_DIV_FMAS_F64, 8)),
        569 => Ok((I::V_MSAD_U8, 8)),
        570 => Ok((I::V_QSAD_PK_U16_U8, 8)),
        571 => Ok((I::V_MQSAD_PK_U16_U8, 8)),
        573 => Ok((I::V_MQSAD_U32_U8, 8)),
        576 => Ok((I::V_XOR3_B32, 8)),
        577 => Ok((I::V_MAD_U16, 8)),
        580 => Ok((I::V_PERM_B32, 8)),
        581 => Ok((I::V_XAD_U32, 8)),
        582 => Ok((I::V_LSHL_ADD_U32, 8)),
        583 => Ok((I::V_ADD_LSHL_U32, 8)),
        584 => Ok((I::V_FMA_F16, 8)),
        586 => Ok((I::V_MIN3_I16, 8)),
        587 => Ok((I::V_MIN3_U16, 8)),
        589 => Ok((I::V_MAX3_I16, 8)),
        590 => Ok((I::V_MAX3_U16, 8)),
        592 => Ok((I::V_MED3_I16, 8)),
        593 => Ok((I::V_MED3_U16, 8)),
        595 => Ok((I::V_MAD_I16, 8)),
        596 => Ok((I::V_DIV_FIXUP_F16, 8)),
        597 => Ok((I::V_ADD3_U32, 8)),
        598 => Ok((I::V_LSHL_OR_B32, 8)),
        599 => Ok((I::V_AND_OR_B32, 8)),
        600 => Ok((I::V_OR3_B32, 8)),
        601 => Ok((I::V_MAD_U32_U16, 8)),
        602 => Ok((I::V_MAD_I32_I16, 8)),
        603 => Ok((I::V_PERMLANE16_B32, 8)),
        604 => Ok((I::V_PERMLANEX16_B32, 8)),
        605 => Ok((I::V_CNDMASK_B16, 8)),
        610 => Ok((I::V_MAXMIN_U32, 8)),
        611 => Ok((I::V_MINMAX_U32, 8)),
        612 => Ok((I::V_MAXMIN_I32, 8)),
        613 => Ok((I::V_MINMAX_I32, 8)),
        614 => Ok((I::V_DOT2_F16_F16, 8)),
        615 => Ok((I::V_DOT2_BF16_BF16, 8)),
        616 => Ok((I::V_MINMAX_NUM_F32, 8)),
        617 => Ok((I::V_MAXMIN_NUM_F32, 8)),
        618 => Ok((I::V_MINMAX_NUM_F16, 8)),
        619 => Ok((I::V_MAXMIN_NUM_F16, 8)),
        620 => Ok((I::V_MINIMUMMAXIMUM_F32, 8)),
        621 => Ok((I::V_MAXIMUMMINIMUM_F32, 8)),
        622 => Ok((I::V_MINIMUMMAXIMUM_F16, 8)),
        623 => Ok((I::V_MAXIMUMMINIMUM_F16, 8)),
        640 => Ok((I::V_S_EXP_F32, 8)),
        641 => Ok((I::V_S_EXP_F16, 8)),
        642 => Ok((I::V_S_LOG_F32, 8)),
        643 => Ok((I::V_S_LOG_F16, 8)),
        644 => Ok((I::V_S_RCP_F32, 8)),
        645 => Ok((I::V_S_RCP_F16, 8)),
        646 => Ok((I::V_S_RSQ_F32, 8)),
        647 => Ok((I::V_S_RSQ_F16, 8)),
        648 => Ok((I::V_S_SQRT_F32, 8)),
        649 => Ok((I::V_S_SQRT_F16, 8)),
        771 => Ok((I::V_ADD_NC_U16, 8)),
        772 => Ok((I::V_SUB_NC_U16, 8)),
        773 => Ok((I::V_MUL_LO_U16, 8)),
        774 => Ok((I::V_CVT_PK_I16_F32, 8)),
        775 => Ok((I::V_CVT_PK_U16_F32, 8)),
        777 => Ok((I::V_MAX_U16, 8)),
        778 => Ok((I::V_MAX_I16, 8)),
        779 => Ok((I::V_MIN_U16, 8)),
        780 => Ok((I::V_MIN_I16, 8)),
        781 => Ok((I::V_ADD_NC_I16, 8)),
        782 => Ok((I::V_SUB_NC_I16, 8)),
        783 => Ok((I::V_PERMLANE16_VAR_B32, 8)),
        784 => Ok((I::V_PERMLANEX16_VAR_B32, 8)),
        785 => Ok((I::V_PACK_B32_F16, 8)),
        786 => Ok((I::V_CVT_PK_NORM_I16_F16, 8)),
        787 => Ok((I::V_CVT_PK_NORM_U16_F16, 8)),
        796 => Ok((I::V_LDEXP_F32, 8)),
        797 => Ok((I::V_BFM_B32, 8)),
        798 => Ok((I::V_BCNT_U32_B32, 8)),
        799 => Ok((I::V_MBCNT_LO_U32_B32, 8)),
        800 => Ok((I::V_MBCNT_HI_U32_B32, 8)),
        801 => Ok((I::V_CVT_PK_NORM_I16_F32, 8)),
        802 => Ok((I::V_CVT_PK_NORM_U16_F32, 8)),
        803 => Ok((I::V_CVT_PK_U16_U32, 8)),
        804 => Ok((I::V_CVT_PK_I16_I32, 8)),
        805 => Ok((I::V_SUB_NC_I32, 8)),
        806 => Ok((I::V_ADD_NC_I32, 8)),
        811 => Ok((I::V_LDEXP_F64, 8)),
        812 => Ok((I::V_MUL_LO_U32, 8)),
        813 => Ok((I::V_MUL_HI_U32, 8)),
        814 => Ok((I::V_MUL_HI_I32, 8)),
        815 => Ok((I::V_TRIG_PREOP_F64, 8)),
        824 => Ok((I::V_LSHLREV_B16, 8)),
        825 => Ok((I::V_LSHRREV_B16, 8)),
        826 => Ok((I::V_ASHRREV_I16, 8)),
        829 => Ok((I::V_LSHRREV_B64, 8)),
        830 => Ok((I::V_ASHRREV_I64, 8)),
        833 => Ok((I::V_MINIMUM_F64, 8)),
        834 => Ok((I::V_MAXIMUM_F64, 8)),
        864 => Ok((I::V_READLANE_B32, 8)),
        865 => Ok((I::V_WRITELANE_B32, 8)),
        866 => Ok((I::V_AND_B16, 8)),
        867 => Ok((I::V_OR_B16, 8)),
        868 => Ok((I::V_XOR_B16, 8)),
        869 => Ok((I::V_MINIMUM_F32, 8)),
        870 => Ok((I::V_MAXIMUM_F32, 8)),
        871 => Ok((I::V_MINIMUM_F16, 8)),
        872 => Ok((I::V_MAXIMUM_F16, 8)),
        873 => Ok((I::V_CVT_PK_FP8_F32, 8)),
        874 => Ok((I::V_CVT_PK_BF8_F32, 8)),
        875 => Ok((I::V_CVT_SR_FP8_F32, 8)),
        876 => Ok((I::V_CVT_SR_BF8_F32, 8)),

        288 => Ok((I::V_ADD_CO_CI_U32, 8)),
        289 => Ok((I::V_SUB_CO_CI_U32, 8)),
        290 => Ok((I::V_SUBREV_CO_CI_U32, 8)),
        764 => Ok((I::V_DIV_SCALE_F32, 8)),
        765 => Ok((I::V_DIV_SCALE_F64, 8)),
        766 => Ok((I::V_MAD_CO_U64_U32, 8)),
        767 => Ok((I::V_MAD_CO_I64_I32, 8)),
        768 => Ok((I::V_ADD_CO_U32, 8)),
        769 => Ok((I::V_SUB_CO_U32, 8)),
        770 => Ok((I::V_SUBREV_CO_U32, 8)),
        _ => Err(()),
    }
}

fn decode_vopc_opcode_rdna4(opcode: u32) -> Result<(I, usize), ()> {
    match opcode {
        1 => Ok((I::V_CMP_LT_F16, 4)),
        2 => Ok((I::V_CMP_EQ_F16, 4)),
        3 => Ok((I::V_CMP_LE_F16, 4)),
        4 => Ok((I::V_CMP_GT_F16, 4)),
        5 => Ok((I::V_CMP_LG_F16, 4)),
        6 => Ok((I::V_CMP_GE_F16, 4)),
        7 => Ok((I::V_CMP_O_F16, 4)),
        8 => Ok((I::V_CMP_U_F16, 4)),
        9 => Ok((I::V_CMP_NGE_F16, 4)),
        10 => Ok((I::V_CMP_NLG_F16, 4)),
        11 => Ok((I::V_CMP_NGT_F16, 4)),
        12 => Ok((I::V_CMP_NLE_F16, 4)),
        13 => Ok((I::V_CMP_NEQ_F16, 4)),
        14 => Ok((I::V_CMP_NLT_F16, 4)),
        17 => Ok((I::V_CMP_LT_F32, 4)),
        18 => Ok((I::V_CMP_EQ_F32, 4)),
        19 => Ok((I::V_CMP_LE_F32, 4)),
        20 => Ok((I::V_CMP_GT_F32, 4)),
        21 => Ok((I::V_CMP_LG_F32, 4)),
        22 => Ok((I::V_CMP_GE_F32, 4)),
        23 => Ok((I::V_CMP_O_F32, 4)),
        24 => Ok((I::V_CMP_U_F32, 4)),
        25 => Ok((I::V_CMP_NGE_F32, 4)),
        26 => Ok((I::V_CMP_NLG_F32, 4)),
        27 => Ok((I::V_CMP_NGT_F32, 4)),
        28 => Ok((I::V_CMP_NLE_F32, 4)),
        29 => Ok((I::V_CMP_NEQ_F32, 4)),
        30 => Ok((I::V_CMP_NLT_F32, 4)),
        33 => Ok((I::V_CMP_LT_F64, 4)),
        34 => Ok((I::V_CMP_EQ_F64, 4)),
        35 => Ok((I::V_CMP_LE_F64, 4)),
        36 => Ok((I::V_CMP_GT_F64, 4)),
        37 => Ok((I::V_CMP_LG_F64, 4)),
        38 => Ok((I::V_CMP_GE_F64, 4)),
        39 => Ok((I::V_CMP_O_F64, 4)),
        40 => Ok((I::V_CMP_U_F64, 4)),
        41 => Ok((I::V_CMP_NGE_F64, 4)),
        42 => Ok((I::V_CMP_NLG_F64, 4)),
        43 => Ok((I::V_CMP_NGT_F64, 4)),
        44 => Ok((I::V_CMP_NLE_F64, 4)),
        45 => Ok((I::V_CMP_NEQ_F64, 4)),
        46 => Ok((I::V_CMP_NLT_F64, 4)),
        49 => Ok((I::V_CMP_LT_I16, 4)),
        50 => Ok((I::V_CMP_EQ_I16, 4)),
        51 => Ok((I::V_CMP_LE_I16, 4)),
        52 => Ok((I::V_CMP_GT_I16, 4)),
        53 => Ok((I::V_CMP_NE_I16, 4)),
        54 => Ok((I::V_CMP_GE_I16, 4)),
        57 => Ok((I::V_CMP_LT_U16, 4)),
        58 => Ok((I::V_CMP_EQ_U16, 4)),
        59 => Ok((I::V_CMP_LE_U16, 4)),
        60 => Ok((I::V_CMP_GT_U16, 4)),
        61 => Ok((I::V_CMP_NE_U16, 4)),
        62 => Ok((I::V_CMP_GE_U16, 4)),
        65 => Ok((I::V_CMP_LT_I32, 4)),
        66 => Ok((I::V_CMP_EQ_I32, 4)),
        67 => Ok((I::V_CMP_LE_I32, 4)),
        68 => Ok((I::V_CMP_GT_I32, 4)),
        69 => Ok((I::V_CMP_NE_I32, 4)),
        70 => Ok((I::V_CMP_GE_I32, 4)),
        73 => Ok((I::V_CMP_LT_U32, 4)),
        74 => Ok((I::V_CMP_EQ_U32, 4)),
        75 => Ok((I::V_CMP_LE_U32, 4)),
        76 => Ok((I::V_CMP_GT_U32, 4)),
        77 => Ok((I::V_CMP_NE_U32, 4)),
        78 => Ok((I::V_CMP_GE_U32, 4)),
        81 => Ok((I::V_CMP_LT_I64, 4)),
        82 => Ok((I::V_CMP_EQ_I64, 4)),
        83 => Ok((I::V_CMP_LE_I64, 4)),
        84 => Ok((I::V_CMP_GT_I64, 4)),
        85 => Ok((I::V_CMP_NE_I64, 4)),
        86 => Ok((I::V_CMP_GE_I64, 4)),
        89 => Ok((I::V_CMP_LT_U64, 4)),
        90 => Ok((I::V_CMP_EQ_U64, 4)),
        91 => Ok((I::V_CMP_LE_U64, 4)),
        92 => Ok((I::V_CMP_GT_U64, 4)),
        93 => Ok((I::V_CMP_NE_U64, 4)),
        94 => Ok((I::V_CMP_GE_U64, 4)),
        125 => Ok((I::V_CMP_CLASS_F16, 4)),
        126 => Ok((I::V_CMP_CLASS_F32, 4)),
        127 => Ok((I::V_CMP_CLASS_F64, 4)),
        129 => Ok((I::V_CMPX_LT_F16, 4)),
        130 => Ok((I::V_CMPX_EQ_F16, 4)),
        131 => Ok((I::V_CMPX_LE_F16, 4)),
        132 => Ok((I::V_CMPX_GT_F16, 4)),
        133 => Ok((I::V_CMPX_LG_F16, 4)),
        134 => Ok((I::V_CMPX_GE_F16, 4)),
        135 => Ok((I::V_CMPX_O_F16, 4)),
        136 => Ok((I::V_CMPX_U_F16, 4)),
        137 => Ok((I::V_CMPX_NGE_F16, 4)),
        138 => Ok((I::V_CMPX_NLG_F16, 4)),
        139 => Ok((I::V_CMPX_NGT_F16, 4)),
        140 => Ok((I::V_CMPX_NLE_F16, 4)),
        141 => Ok((I::V_CMPX_NEQ_F16, 4)),
        142 => Ok((I::V_CMPX_NLT_F16, 4)),
        145 => Ok((I::V_CMPX_LT_F32, 4)),
        146 => Ok((I::V_CMPX_EQ_F32, 4)),
        147 => Ok((I::V_CMPX_LE_F32, 4)),
        148 => Ok((I::V_CMPX_GT_F32, 4)),
        149 => Ok((I::V_CMPX_LG_F32, 4)),
        150 => Ok((I::V_CMPX_GE_F32, 4)),
        151 => Ok((I::V_CMPX_O_F32, 4)),
        152 => Ok((I::V_CMPX_U_F32, 4)),
        153 => Ok((I::V_CMPX_NGE_F32, 4)),
        154 => Ok((I::V_CMPX_NLG_F32, 4)),
        155 => Ok((I::V_CMPX_NGT_F32, 4)),
        156 => Ok((I::V_CMPX_NLE_F32, 4)),
        157 => Ok((I::V_CMPX_NEQ_F32, 4)),
        158 => Ok((I::V_CMPX_NLT_F32, 4)),
        161 => Ok((I::V_CMPX_LT_F64, 4)),
        162 => Ok((I::V_CMPX_EQ_F64, 4)),
        163 => Ok((I::V_CMPX_LE_F64, 4)),
        164 => Ok((I::V_CMPX_GT_F64, 4)),
        165 => Ok((I::V_CMPX_LG_F64, 4)),
        166 => Ok((I::V_CMPX_GE_F64, 4)),
        167 => Ok((I::V_CMPX_O_F64, 4)),
        168 => Ok((I::V_CMPX_U_F64, 4)),
        169 => Ok((I::V_CMPX_NGE_F64, 4)),
        170 => Ok((I::V_CMPX_NLG_F64, 4)),
        171 => Ok((I::V_CMPX_NGT_F64, 4)),
        172 => Ok((I::V_CMPX_NLE_F64, 4)),
        173 => Ok((I::V_CMPX_NEQ_F64, 4)),
        174 => Ok((I::V_CMPX_NLT_F64, 4)),
        177 => Ok((I::V_CMPX_LT_I16, 4)),
        178 => Ok((I::V_CMPX_EQ_I16, 4)),
        179 => Ok((I::V_CMPX_LE_I16, 4)),
        180 => Ok((I::V_CMPX_GT_I16, 4)),
        181 => Ok((I::V_CMPX_NE_I16, 4)),
        182 => Ok((I::V_CMPX_GE_I16, 4)),
        185 => Ok((I::V_CMPX_LT_U16, 4)),
        186 => Ok((I::V_CMPX_EQ_U16, 4)),
        187 => Ok((I::V_CMPX_LE_U16, 4)),
        188 => Ok((I::V_CMPX_GT_U16, 4)),
        189 => Ok((I::V_CMPX_NE_U16, 4)),
        190 => Ok((I::V_CMPX_GE_U16, 4)),
        193 => Ok((I::V_CMPX_LT_I32, 4)),
        194 => Ok((I::V_CMPX_EQ_I32, 4)),
        195 => Ok((I::V_CMPX_LE_I32, 4)),
        196 => Ok((I::V_CMPX_GT_I32, 4)),
        197 => Ok((I::V_CMPX_NE_I32, 4)),
        198 => Ok((I::V_CMPX_GE_I32, 4)),
        201 => Ok((I::V_CMPX_LT_U32, 4)),
        202 => Ok((I::V_CMPX_EQ_U32, 4)),
        203 => Ok((I::V_CMPX_LE_U32, 4)),
        204 => Ok((I::V_CMPX_GT_U32, 4)),
        205 => Ok((I::V_CMPX_NE_U32, 4)),
        206 => Ok((I::V_CMPX_GE_U32, 4)),
        209 => Ok((I::V_CMPX_LT_I64, 4)),
        210 => Ok((I::V_CMPX_EQ_I64, 4)),
        211 => Ok((I::V_CMPX_LE_I64, 4)),
        212 => Ok((I::V_CMPX_GT_I64, 4)),
        213 => Ok((I::V_CMPX_NE_I64, 4)),
        214 => Ok((I::V_CMPX_GE_I64, 4)),
        217 => Ok((I::V_CMPX_LT_U64, 4)),
        218 => Ok((I::V_CMPX_EQ_U64, 4)),
        219 => Ok((I::V_CMPX_LE_U64, 4)),
        220 => Ok((I::V_CMPX_GT_U64, 4)),
        221 => Ok((I::V_CMPX_NE_U64, 4)),
        222 => Ok((I::V_CMPX_GE_U64, 4)),
        253 => Ok((I::V_CMPX_CLASS_F16, 4)),
        254 => Ok((I::V_CMPX_CLASS_F32, 4)),
        255 => Ok((I::V_CMPX_CLASS_F64, 4)),
        _ => Err(()),
    }
}

fn decode_opx_opcode_rdna4(opcode: u32) -> Result<I, ()> {
    match opcode {
        0 => Ok(I::V_DUAL_FMAC_F32),
        1 => Ok(I::V_DUAL_FMAAK_F32),
        2 => Ok(I::V_DUAL_FMAMK_F32),
        3 => Ok(I::V_DUAL_MUL_F32),
        4 => Ok(I::V_DUAL_ADD_F32),
        5 => Ok(I::V_DUAL_SUB_F32),
        6 => Ok(I::V_DUAL_SUBREV_F32),
        7 => Ok(I::V_DUAL_MUL_DX9_ZERO_F32),
        8 => Ok(I::V_DUAL_MOV_B32),
        9 => Ok(I::V_DUAL_CNDMASK_B32),
        10 => Ok(I::V_DUAL_MAX_NUM_F32),
        11 => Ok(I::V_DUAL_MIN_NUM_F32),
        12 => Ok(I::V_DUAL_DOT2ACC_F32_F16),
        13 => Ok(I::V_DUAL_DOT2ACC_F32_BF16),
        _ => Err(()),
    }
}

fn decode_opy_opcode_rdna4(opcode: u32) -> Result<I, ()> {
    match opcode {
        0 => Ok(I::V_DUAL_FMAC_F32),
        1 => Ok(I::V_DUAL_FMAAK_F32),
        2 => Ok(I::V_DUAL_FMAMK_F32),
        3 => Ok(I::V_DUAL_MUL_F32),
        4 => Ok(I::V_DUAL_ADD_F32),
        5 => Ok(I::V_DUAL_SUB_F32),
        6 => Ok(I::V_DUAL_SUBREV_F32),
        7 => Ok(I::V_DUAL_MUL_DX9_ZERO_F32),
        8 => Ok(I::V_DUAL_MOV_B32),
        9 => Ok(I::V_DUAL_CNDMASK_B32),
        10 => Ok(I::V_DUAL_MAX_NUM_F32),
        11 => Ok(I::V_DUAL_MIN_NUM_F32),
        12 => Ok(I::V_DUAL_DOT2ACC_F32_F16),
        13 => Ok(I::V_DUAL_DOT2ACC_F32_BF16),
        16 => Ok(I::V_DUAL_ADD_NC_U32),
        17 => Ok(I::V_DUAL_LSHLREV_B32),
        18 => Ok(I::V_DUAL_AND_B32),
        _ => Err(()),
    }
}

fn decode_smem_opcode_rdna4(opcode: u32) -> Result<(I, usize), ()> {
    match opcode {
        0 => Ok((I::S_LOAD_B32, 8)),
        1 => Ok((I::S_LOAD_B64, 8)),
        2 => Ok((I::S_LOAD_B128, 8)),
        3 => Ok((I::S_LOAD_B256, 8)),
        4 => Ok((I::S_LOAD_B512, 8)),
        5 => Ok((I::S_LOAD_B96, 8)),
        8 => Ok((I::S_LOAD_I8, 8)),
        9 => Ok((I::S_LOAD_U8, 8)),
        10 => Ok((I::S_LOAD_I16, 8)),
        11 => Ok((I::S_LOAD_U16, 8)),
        16 => Ok((I::S_BUFFER_LOAD_B32, 8)),
        17 => Ok((I::S_BUFFER_LOAD_B64, 8)),
        18 => Ok((I::S_BUFFER_LOAD_B128, 8)),
        19 => Ok((I::S_BUFFER_LOAD_B256, 8)),
        20 => Ok((I::S_BUFFER_LOAD_B512, 8)),
        21 => Ok((I::S_BUFFER_LOAD_B96, 8)),
        24 => Ok((I::S_BUFFER_LOAD_I8, 8)),
        25 => Ok((I::S_BUFFER_LOAD_U8, 8)),
        26 => Ok((I::S_BUFFER_LOAD_I16, 8)),
        27 => Ok((I::S_BUFFER_LOAD_U16, 8)),
        33 => Ok((I::S_DCACHE_INV, 8)),
        36 => Ok((I::S_PREFETCH_INST, 8)),
        37 => Ok((I::S_PREFETCH_INST_PC_REL, 8)),
        38 => Ok((I::S_PREFETCH_DATA, 8)),
        39 => Ok((I::S_BUFFER_PREFETCH_DATA, 8)),
        40 => Ok((I::S_PREFETCH_DATA_PC_REL, 8)),
        _ => Err(()),
    }
}

fn decode_vscratch_opcode_rdna4(opcode: u32) -> Result<(I, usize), ()> {
    match opcode {
        16 => Ok((I::SCRATCH_LOAD_U8, 12)),
        17 => Ok((I::SCRATCH_LOAD_I8, 12)),
        18 => Ok((I::SCRATCH_LOAD_U16, 12)),
        19 => Ok((I::SCRATCH_LOAD_I16, 12)),
        20 => Ok((I::SCRATCH_LOAD_B32, 12)),
        21 => Ok((I::SCRATCH_LOAD_B64, 12)),
        22 => Ok((I::SCRATCH_LOAD_B96, 12)),
        23 => Ok((I::SCRATCH_LOAD_B128, 12)),
        24 => Ok((I::SCRATCH_STORE_B8, 12)),
        25 => Ok((I::SCRATCH_STORE_B16, 12)),
        26 => Ok((I::SCRATCH_STORE_B32, 12)),
        27 => Ok((I::SCRATCH_STORE_B64, 12)),
        28 => Ok((I::SCRATCH_STORE_B96, 12)),
        29 => Ok((I::SCRATCH_STORE_B128, 12)),
        30 => Ok((I::SCRATCH_LOAD_D16_U8, 12)),
        31 => Ok((I::SCRATCH_LOAD_D16_I8, 12)),
        32 => Ok((I::SCRATCH_LOAD_D16_B16, 12)),
        33 => Ok((I::SCRATCH_LOAD_D16_HI_U8, 12)),
        34 => Ok((I::SCRATCH_LOAD_D16_HI_I8, 12)),
        35 => Ok((I::SCRATCH_LOAD_D16_HI_B16, 12)),
        36 => Ok((I::SCRATCH_STORE_D16_HI_B8, 12)),
        37 => Ok((I::SCRATCH_STORE_D16_HI_B16, 12)),
        83 => Ok((I::SCRATCH_LOAD_BLOCK, 12)),
        84 => Ok((I::SCRATCH_STORE_BLOCK, 12)),
        _ => Err(()),
    }
}

fn decode_vglobal_opcode_rdna4(opcode: u32) -> Result<(I, usize), ()> {
    match opcode {
        16 => Ok((I::GLOBAL_LOAD_U8, 12)),
        17 => Ok((I::GLOBAL_LOAD_I8, 12)),
        18 => Ok((I::GLOBAL_LOAD_U16, 12)),
        19 => Ok((I::GLOBAL_LOAD_I16, 12)),
        20 => Ok((I::GLOBAL_LOAD_B32, 12)),
        21 => Ok((I::GLOBAL_LOAD_B64, 12)),
        22 => Ok((I::GLOBAL_LOAD_B96, 12)),
        23 => Ok((I::GLOBAL_LOAD_B128, 12)),
        24 => Ok((I::GLOBAL_STORE_B8, 12)),
        25 => Ok((I::GLOBAL_STORE_B16, 12)),
        26 => Ok((I::GLOBAL_STORE_B32, 12)),
        27 => Ok((I::GLOBAL_STORE_B64, 12)),
        28 => Ok((I::GLOBAL_STORE_B96, 12)),
        29 => Ok((I::GLOBAL_STORE_B128, 12)),
        30 => Ok((I::GLOBAL_LOAD_D16_U8, 12)),
        31 => Ok((I::GLOBAL_LOAD_D16_I8, 12)),
        32 => Ok((I::GLOBAL_LOAD_D16_B16, 12)),
        33 => Ok((I::GLOBAL_LOAD_D16_HI_U8, 12)),
        34 => Ok((I::GLOBAL_LOAD_D16_HI_I8, 12)),
        35 => Ok((I::GLOBAL_LOAD_D16_HI_B16, 12)),
        36 => Ok((I::GLOBAL_STORE_D16_HI_B8, 12)),
        37 => Ok((I::GLOBAL_STORE_D16_HI_B16, 12)),
        40 => Ok((I::GLOBAL_LOAD_ADDTID_B32, 12)),
        41 => Ok((I::GLOBAL_STORE_ADDTID_B32, 12)),
        43 => Ok((I::GLOBAL_INV, 12)),
        44 => Ok((I::GLOBAL_WB, 12)),
        51 => Ok((I::GLOBAL_ATOMIC_SWAP_B32, 12)),
        52 => Ok((I::GLOBAL_ATOMIC_CMPSWAP_B32, 12)),
        53 => Ok((I::GLOBAL_ATOMIC_ADD_U32, 12)),
        54 => Ok((I::GLOBAL_ATOMIC_SUB_U32, 12)),
        55 => Ok((I::GLOBAL_ATOMIC_SUB_CLAMP_U32, 12)),
        56 => Ok((I::GLOBAL_ATOMIC_MIN_I32, 12)),
        57 => Ok((I::GLOBAL_ATOMIC_MIN_U32, 12)),
        64 => Ok((I::GLOBAL_ATOMIC_DEC_U32, 12)),
        65 => Ok((I::GLOBAL_ATOMIC_SWAP_B64, 12)),
        66 => Ok((I::GLOBAL_ATOMIC_CMPSWAP_B64, 12)),
        67 => Ok((I::GLOBAL_ATOMIC_ADD_U64, 12)),
        68 => Ok((I::GLOBAL_ATOMIC_SUB_U64, 12)),
        69 => Ok((I::GLOBAL_ATOMIC_MIN_I64, 12)),
        70 => Ok((I::GLOBAL_ATOMIC_MIN_U64, 12)),
        71 => Ok((I::GLOBAL_ATOMIC_MAX_I64, 12)),
        72 => Ok((I::GLOBAL_ATOMIC_MAX_U64, 12)),
        73 => Ok((I::GLOBAL_ATOMIC_AND_B32, 12)),
        74 => Ok((I::GLOBAL_ATOMIC_OR_B32, 12)),
        75 => Ok((I::GLOBAL_ATOMIC_XOR_B32, 12)),
        76 => Ok((I::GLOBAL_ATOMIC_INC_U32, 12)),
        77 => Ok((I::GLOBAL_ATOMIC_DEC_U32, 12)),
        79 => Ok((I::GLOBAL_WBINV, 12)),
        80 => Ok((I::GLOBAL_ATOMIC_COND_SUB_U32, 12)),
        81 => Ok((I::GLOBAL_ATOMIC_MIN_NUM_F32, 12)),
        82 => Ok((I::GLOBAL_ATOMIC_MAX_NUM_F32, 12)),
        83 => Ok((I::GLOBAL_LOAD_BLOCK, 12)),
        84 => Ok((I::GLOBAL_STORE_BLOCK, 12)),
        86 => Ok((I::GLOBAL_ATOMIC_ADD_F32, 12)),
        87 => Ok((I::GLOBAL_LOAD_TR_B128, 12)),
        88 => Ok((I::GLOBAL_LOAD_TR_B64, 12)),
        89 => Ok((I::GLOBAL_ATOMIC_PK_ADD_F16, 12)),
        90 => Ok((I::GLOBAL_ATOMIC_PK_ADD_BF16, 12)),
        115 => Ok((I::GLOBAL_ATOMIC_ORDERED_ADD_B64, 12)),
        _ => Err(()),
    }
}

fn decode_ds_opcode_rdna4(opcode: u32) -> Result<(I, usize), ()> {
    match opcode {
        0 => Ok((I::DS_ADD_U32, 8)),
        1 => Ok((I::DS_SUB_U32, 8)),
        2 => Ok((I::DS_RSUB_U32, 8)),
        3 => Ok((I::DS_INC_U32, 8)),
        4 => Ok((I::DS_DEC_U32, 8)),
        5 => Ok((I::DS_MIN_I32, 8)),
        6 => Ok((I::DS_MAX_I32, 8)),
        7 => Ok((I::DS_MIN_U32, 8)),
        8 => Ok((I::DS_MAX_U32, 8)),
        9 => Ok((I::DS_AND_B32, 8)),
        10 => Ok((I::DS_OR_B32, 8)),
        11 => Ok((I::DS_XOR_B32, 8)),
        12 => Ok((I::DS_MSKOR_B32, 8)),
        13 => Ok((I::DS_STORE_B32, 8)),
        14 => Ok((I::DS_STORE_2ADDR_B32, 8)),
        15 => Ok((I::DS_STORE_2ADDR_STRIDE64_B32, 8)),
        16 => Ok((I::DS_CMPSTORE_B32, 8)),
        18 => Ok((I::DS_MIN_NUM_F32, 8)),
        19 => Ok((I::DS_MAX_NUM_F32, 8)),
        20 => Ok((I::DS_NOP, 8)),
        21 => Ok((I::DS_ADD_F32, 8)),
        30 => Ok((I::DS_STORE_B8, 8)),
        31 => Ok((I::DS_STORE_B16, 8)),
        32 => Ok((I::DS_ADD_RTN_U32, 8)),
        33 => Ok((I::DS_SUB_RTN_U32, 8)),
        34 => Ok((I::DS_RSUB_RTN_U32, 8)),
        35 => Ok((I::DS_INC_RTN_U32, 8)),
        36 => Ok((I::DS_DEC_RTN_U32, 8)),
        37 => Ok((I::DS_MIN_RTN_I32, 8)),
        38 => Ok((I::DS_MAX_RTN_I32, 8)),
        39 => Ok((I::DS_MIN_RTN_U32, 8)),
        40 => Ok((I::DS_MAX_RTN_U32, 8)),
        41 => Ok((I::DS_AND_RTN_B32, 8)),
        42 => Ok((I::DS_OR_RTN_B32, 8)),
        43 => Ok((I::DS_XOR_RTN_B32, 8)),
        44 => Ok((I::DS_MSKOR_RTN_B32, 8)),
        45 => Ok((I::DS_STOREXCHG_RTN_B32, 8)),
        46 => Ok((I::DS_STOREXCHG_2ADDR_RTN_B32, 8)),
        47 => Ok((I::DS_STOREXCHG_2ADDR_STRIDE64_RTN_B32, 8)),
        48 => Ok((I::DS_CMPSTORE_RTN_B32, 8)),
        50 => Ok((I::DS_MIN_NUM_RTN_F32, 8)),
        51 => Ok((I::DS_MAX_NUM_RTN_F32, 8)),
        53 => Ok((I::DS_SWIZZLE_B32, 8)),
        54 => Ok((I::DS_LOAD_B32, 8)),
        55 => Ok((I::DS_LOAD_2ADDR_B32, 8)),
        56 => Ok((I::DS_LOAD_2ADDR_STRIDE64_B32, 8)),
        57 => Ok((I::DS_LOAD_I8, 8)),
        58 => Ok((I::DS_LOAD_U8, 8)),
        59 => Ok((I::DS_LOAD_I16, 8)),
        60 => Ok((I::DS_LOAD_U16, 8)),
        61 => Ok((I::DS_CONSUME, 8)),
        62 => Ok((I::DS_APPEND, 8)),
        64 => Ok((I::DS_ADD_U64, 8)),
        65 => Ok((I::DS_SUB_U64, 8)),
        66 => Ok((I::DS_RSUB_U64, 8)),
        67 => Ok((I::DS_INC_U64, 8)),
        68 => Ok((I::DS_DEC_U64, 8)),
        69 => Ok((I::DS_MIN_I64, 8)),
        70 => Ok((I::DS_MAX_I64, 8)),
        71 => Ok((I::DS_MIN_U64, 8)),
        72 => Ok((I::DS_MAX_U64, 8)),
        73 => Ok((I::DS_AND_B64, 8)),
        74 => Ok((I::DS_OR_B64, 8)),
        75 => Ok((I::DS_XOR_B64, 8)),
        76 => Ok((I::DS_MSKOR_B64, 8)),
        77 => Ok((I::DS_STORE_B64, 8)),
        78 => Ok((I::DS_STORE_2ADDR_B64, 8)),
        79 => Ok((I::DS_STORE_2ADDR_STRIDE64_B64, 8)),
        80 => Ok((I::DS_CMPSTORE_B64, 8)),
        82 => Ok((I::DS_MIN_NUM_F64, 8)),
        83 => Ok((I::DS_MAX_NUM_F64, 8)),
        96 => Ok((I::DS_ADD_RTN_U64, 8)),
        97 => Ok((I::DS_SUB_RTN_U64, 8)),
        98 => Ok((I::DS_RSUB_RTN_U64, 8)),
        99 => Ok((I::DS_INC_RTN_U64, 8)),
        100 => Ok((I::DS_DEC_RTN_U64, 8)),
        101 => Ok((I::DS_MIN_RTN_I64, 8)),
        102 => Ok((I::DS_MAX_RTN_I64, 8)),
        103 => Ok((I::DS_MIN_RTN_U64, 8)),
        104 => Ok((I::DS_MAX_RTN_U64, 8)),
        105 => Ok((I::DS_AND_RTN_B64, 8)),
        106 => Ok((I::DS_OR_RTN_B64, 8)),
        107 => Ok((I::DS_XOR_RTN_B64, 8)),
        108 => Ok((I::DS_MSKOR_RTN_B64, 8)),
        109 => Ok((I::DS_STOREXCHG_RTN_B64, 8)),
        110 => Ok((I::DS_STOREXCHG_2ADDR_RTN_B64, 8)),
        111 => Ok((I::DS_STOREXCHG_2ADDR_STRIDE64_RTN_B64, 8)),
        112 => Ok((I::DS_CMPSTORE_RTN_B64, 8)),
        114 => Ok((I::DS_MIN_NUM_RTN_F64, 8)),
        115 => Ok((I::DS_MAX_NUM_RTN_F64, 8)),
        118 => Ok((I::DS_LOAD_B64, 8)),
        119 => Ok((I::DS_LOAD_2ADDR_B64, 8)),
        120 => Ok((I::DS_LOAD_2ADDR_STRIDE64_B64, 8)),
        121 => Ok((I::DS_ADD_RTN_F32, 8)),
        126 => Ok((I::DS_CONDXCHG32_RTN_B64, 8)),
        152 => Ok((I::DS_COND_SUB_U32, 8)),
        153 => Ok((I::DS_SUB_CLAMP_U32, 8)),
        154 => Ok((I::DS_PK_ADD_F16, 8)),
        155 => Ok((I::DS_PK_ADD_BF16, 8)),
        160 => Ok((I::DS_STORE_B8_D16_HI, 8)),
        161 => Ok((I::DS_STORE_B16_D16_HI, 8)),
        162 => Ok((I::DS_LOAD_U8_D16, 8)),
        163 => Ok((I::DS_LOAD_U8_D16_HI, 8)),
        164 => Ok((I::DS_LOAD_I8_D16, 8)),
        165 => Ok((I::DS_LOAD_I8_D16_HI, 8)),
        166 => Ok((I::DS_LOAD_U16_D16, 8)),
        167 => Ok((I::DS_LOAD_U16_D16_HI, 8)),
        168 => Ok((I::DS_COND_SUB_RTN_U32, 8)),
        169 => Ok((I::DS_SUB_CLAMP_RTN_U32, 8)),
        170 => Ok((I::DS_PK_ADD_RTN_F16, 8)),
        171 => Ok((I::DS_PK_ADD_RTN_BF16, 8)),
        176 => Ok((I::DS_STORE_ADDTID_B32, 8)),
        177 => Ok((I::DS_LOAD_ADDTID_B32, 8)),
        178 => Ok((I::DS_PERMUTE_B32, 8)),
        179 => Ok((I::DS_BPERMUTE_B32, 8)),
        205 => Ok((I::DS_BPERMUTE_FI_B32, 8)),
        222 => Ok((I::DS_STORE_B96, 8)),
        223 => Ok((I::DS_STORE_B128, 8)),
        224 => Ok((I::DS_BVH_STACK_PUSH4_POP1_RTN_B32, 8)),
        225 => Ok((I::DS_BVH_STACK_PUSH8_POP1_RTN_B32, 8)),
        226 => Ok((I::DS_BVH_STACK_PUSH8_POP2_RTN_B64, 8)),
        254 => Ok((I::DS_LOAD_B96, 8)),
        255 => Ok((I::DS_LOAD_B128, 8)),
        _ => Err(()),
    }
}

fn max<T: std::cmp::Ord>(a: T, b: T) -> T {
    if a > b {
        a
    } else {
        b
    }
}

fn has_scalar_destination(op: &I) -> bool {
    match op {
        I::V_ADD_CO_CI_U32
        | I::V_SUB_CO_CI_U32
        | I::V_SUBREV_CO_CI_U32
        | I::V_DIV_SCALE_F32
        | I::V_DIV_SCALE_F64
        | I::V_MAD_CO_U64_U32
        | I::V_MAD_CO_I64_I32
        | I::V_ADD_CO_U32
        | I::V_SUB_CO_U32
        | I::V_SUBREV_CO_U32 => true,
        _ => false,
    }
}

pub struct InstStream<'a> {
    pub insts: &'a [u8],
}

fn decode_source_operand(operand: u16, literal_constant: &[u8]) -> SourceOperand {
    match operand {
        0..=127 => SourceOperand::ScalarRegister(operand as u8),
        128..=192 => SourceOperand::IntegerConstant((operand - 128) as u64),
        193..=208 => SourceOperand::IntegerConstant((-((operand - 192) as i64)) as u64),
        240 => SourceOperand::FloatConstant(0.5),  // 0.5
        241 => SourceOperand::FloatConstant(-0.5), // -0.5
        242 => SourceOperand::FloatConstant(1.0),  // 1.0
        243 => SourceOperand::FloatConstant(-1.0), // -1.0
        244 => SourceOperand::FloatConstant(2.0),  // 2.0
        245 => SourceOperand::FloatConstant(-2.0), // -2.0
        246 => SourceOperand::FloatConstant(4.0),  // 4.0
        247 => SourceOperand::FloatConstant(-4.0), // -4.0
        248 => SourceOperand::FloatConstant(0.15915494309), // 1/(2*PI)
        255 => SourceOperand::LiteralConstant(buffer::get_u32(literal_constant, 0)),
        256..511 => SourceOperand::VectorRegister((operand - 256) as u8),
        _ => panic!(),
    }
}

pub fn decode_rdna4(inst_stream: InstStream) -> Result<(InstFormat, usize), ()> {
    let inst = buffer::get_u64(inst_stream.insts, 0);
    if (get_bits(inst, 31, 23) as u32) == SOP1_ENCODE {
        let ssrc0 = get_bits(inst, 7, 0) as u8;
        let (op, size) = decode_sop1_opcode_rdna4(get_bits(inst, 15, 8) as u32)?;
        Ok((
            InstFormat::SOP1(SOP1 {
                ssrc0: decode_source_operand(ssrc0 as u16, &inst_stream.insts[4..]),
                op,
                sdst: get_bits(inst, 22, 16) as u8,
            }),
            if ssrc0 == 255 { max(8, size) } else { size },
        ))
    } else if (get_bits(inst, 31, 23) as u32) == SOPC_ENCODE {
        let ssrc0 = get_bits(inst, 7, 0) as u8;
        let ssrc1 = get_bits(inst, 15, 8) as u8;
        let (op, size) = decode_sopc_opcode_rdna4(get_bits(inst, 22, 16) as u32)?;
        Ok((
            InstFormat::SOPC(SOPC {
                ssrc0: decode_source_operand(ssrc0 as u16, &inst_stream.insts[4..]),
                ssrc1: decode_source_operand(ssrc1 as u16, &inst_stream.insts[4..]),
                op,
            }),
            if ssrc0 == 255 || ssrc1 == 255 {
                max(8, size)
            } else {
                size
            },
        ))
    } else if (get_bits(inst, 31, 23) as u32) == SOPP_ENCODE {
        let (op, size) = decode_sopp_opcode_rdna4(get_bits(inst, 22, 16) as u32)?;
        Ok((
            InstFormat::SOPP(SOPP {
                simm16: get_bits(inst, 15, 0) as u16,
                op,
            }),
            size,
        ))
    } else if (get_bits(inst, 31, 28) as u32) == SOPK_ENCODE {
        let (op, size) = decode_sopk_opcode_rdna4(get_bits(inst, 27, 23) as u32)?;
        Ok((
            InstFormat::SOPK(SOPK {
                simm16: get_bits(inst, 15, 0) as u16,
                sdst: get_bits(inst, 22, 16) as u8,
                op,
            }),
            size,
        ))
    } else if (get_bits(inst, 31, 30) as u32) == SOP2_ENCODE {
        let ssrc0 = get_bits(inst, 7, 0) as u8;
        let ssrc1 = get_bits(inst, 15, 8) as u8;
        let (op, size) = decode_sop2_opcode_rdna4(get_bits(inst, 29, 23) as u32)?;
        Ok((
            InstFormat::SOP2(SOP2 {
                ssrc0: decode_source_operand(ssrc0 as u16, &inst_stream.insts[4..]),
                ssrc1: decode_source_operand(ssrc1 as u16, &inst_stream.insts[4..]),
                sdst: get_bits(inst, 22, 16) as u8,
                op,
            }),
            if ssrc0 == 255 || ssrc1 == 255 {
                max(8, size)
            } else {
                size
            },
        ))
    } else if (get_bits(inst, 31, 25) as u32) == VOPC_ENCODE {
        let (op, size) = decode_vopc_opcode_rdna4(get_bits(inst, 24, 17) as u32)?;
        let src0 = get_bits(inst, 8, 0) as u16;
        Ok((
            InstFormat::VOPC(VOPC {
                src0: decode_source_operand(src0, &inst_stream.insts[4..]),
                vsrc1: get_bits(inst, 16, 9) as u8,
                op,
            }),
            if src0 == 255 { max(8, size) } else { size },
        ))
    } else if (get_bits(inst, 31, 26) as u32) == VOPD_ENCODE {
        let opx = decode_opx_opcode_rdna4(get_bits(inst, 25, 22) as u32)?;
        let opy = decode_opy_opcode_rdna4(get_bits(inst, 21, 17) as u32)?;
        let size = 8;
        let src0x = get_bits(inst, 8, 0) as u16;
        let vsrc1x = get_bits(inst, 16, 9) as u8;
        let src0y = get_bits(inst, 40, 32) as u16;
        let vsrc1y = get_bits(inst, 48, 41) as u8;
        let vdstx = get_bits(inst, 63, 56) as u8;
        let vdsty = get_bits(inst, 55, 49) as u8;
        Ok((
            InstFormat::VOPD(VOPD {
                opx,
                opy,
                src0x: decode_source_operand(src0x, &inst_stream.insts[8..]),
                src0y: decode_source_operand(src0y, &inst_stream.insts[8..]),
                vsrc1x,
                vsrc1y,
                vdstx,
                vdsty,
            }),
            if src0x == 255 || src0y == 255 {
                size + 4
            } else {
                size
            },
        ))
    } else if (get_bits(inst, 31, 25) as u32) == VOP1_ENCODE {
        let src0 = get_bits(inst, 8, 0) as u16;
        let (op, size) = decode_vop1_opcode_rdna4(get_bits(inst, 15, 9) as u32)?;
        Ok((
            InstFormat::VOP1(VOP1 {
                src0: decode_source_operand(src0, &inst_stream.insts[4..]),
                op,
                vdst: get_bits(inst, 24, 17) as u8,
            }),
            if src0 == 255 { max(8, size) } else { size },
        ))
    } else if (get_bits(inst, 31, 31) as u32) == VOP2_ENCODE {
        let src0 = get_bits(inst, 8, 0) as u16;
        let (op, size) = decode_vop2_opcode_rdna4(get_bits(inst, 30, 25) as u32)?;
        Ok((
            InstFormat::VOP2(VOP2 {
                src0: decode_source_operand(src0, &inst_stream.insts[4..]),
                vsrc1: get_bits(inst, 16, 9) as u8,
                vdst: get_bits(inst, 24, 17) as u8,
                op,
            }),
            if src0 == 255 { max(8, size) } else { size },
        ))
    } else if (get_bits(inst, 31, 26) as u32) == VOP3_ENCODE {
        let vdst = get_bits(inst, 7, 0) as u8;
        let cm = get_bits(inst, 15, 15) as u8;
        let src0 = get_bits(inst, 40, 32) as u16;
        let src1 = get_bits(inst, 49, 41) as u16;
        let src2 = get_bits(inst, 58, 50) as u16;
        let omod = get_bits(inst, 60, 59) as u8;
        let neg = get_bits(inst, 63, 61) as u8;
        let (op, size) = decode_vop3_opcode_rdna4(get_bits(inst, 25, 16) as u32)?;

        if has_scalar_destination(&op) {
            Ok((
                InstFormat::VOP3SD(VOP3SD {
                    vdst,
                    sdst: get_bits(inst, 14, 8) as u8,
                    cm,
                    op,
                    src0: decode_source_operand(src0, &inst_stream.insts[8..]),
                    src1: decode_source_operand(src1, &inst_stream.insts[8..]),
                    src2: decode_source_operand(src2, &inst_stream.insts[8..]),
                    omod,
                    neg,
                }),
                if src0 == 255 || src1 == 255 || src2 == 255 {
                    size + 4
                } else {
                    size
                },
            ))
        } else {
            Ok((
                InstFormat::VOP3(VOP3 {
                    vdst,
                    abs: get_bits(inst, 10, 8) as u8,
                    opsel: get_bits(inst, 14, 11) as u8,
                    cm,
                    op,
                    src0: decode_source_operand(src0, &inst_stream.insts[8..]),
                    src1: decode_source_operand(src1, &inst_stream.insts[8..]),
                    src2: decode_source_operand(src2, &inst_stream.insts[8..]),
                    omod,
                    neg,
                }),
                if src0 == 255 || src1 == 255 || src2 == 255 {
                    size + 4
                } else {
                    size
                },
            ))
        }
    } else if (get_bits(inst, 31, 26) as u32) == SMEM_ENCODE {
        let (op, size) = decode_smem_opcode_rdna4(get_bits(inst, 18, 13) as u32)?;
        Ok((
            InstFormat::SMEM(SMEM {
                op,
                sdata: get_bits(inst, 12, 6) as u8,
                sbase: get_bits(inst, 5, 0) as u8,
                ioffset: get_bits(inst, 55, 32) as u32,
                soffset: get_bits(inst, 63, 57) as u8,
                scope: get_bits(inst, 22, 21) as u8,
                th: get_bits(inst, 24, 23) as u8,
            }),
            size,
        ))
    } else if (get_bits(inst, 31, 24) as u32) == VSCRATCH_ENCODE {
        let inst_hi = buffer::get_u32(inst_stream.insts, 8) as u64;
        let (op, size) = decode_vscratch_opcode_rdna4(get_bits(inst, 21, 14) as u32)?;
        Ok((
            InstFormat::VSCRATCH(VSCRATCH {
                op,
                vaddr: get_bits(inst_hi, 71 - 64, 64 - 64) as u8,
                vsrc: get_bits(inst, 62, 55) as u8,
                vdst: get_bits(inst, 39, 32) as u8,
                scope: get_bits(inst, 51, 50) as u8,
                th: get_bits(inst, 54, 52) as u8,
                ioffset: get_bits(inst_hi, 95 - 64, 72 - 64) as u32,
                saddr: get_bits(inst, 6, 0) as u8,
                sve: get_bits(inst, 49, 49) as u8,
            }),
            size,
        ))
    } else if (get_bits(inst, 31, 24) as u32) == VGLOBAL_ENCODE {
        let inst_hi = buffer::get_u32(inst_stream.insts, 8) as u64;
        let (op, size) = decode_vglobal_opcode_rdna4(get_bits(inst, 21, 14) as u32)?;
        Ok((
            InstFormat::VGLOBAL(VGLOBAL {
                op,
                vaddr: get_bits(inst_hi, 71 - 64, 64 - 64) as u8,
                vsrc: get_bits(inst, 62, 55) as u8,
                vdst: get_bits(inst, 39, 32) as u8,
                scope: get_bits(inst, 51, 50) as u8,
                th: get_bits(inst, 54, 52) as u8,
                ioffset: get_bits(inst_hi, 95 - 64, 72 - 64) as u32,
                saddr: get_bits(inst, 6, 0) as u8,
                sve: get_bits(inst, 49, 49) as u8,
            }),
            size,
        ))
    } else if (get_bits(inst, 31, 26) as u32) == DS_ENCODE {
        let (op, size) = decode_ds_opcode_rdna4(get_bits(inst, 25, 18) as u32)?;
        Ok((
            InstFormat::DS(DS {
                offset0: get_bits(inst, 7, 0) as u8,
                offset1: get_bits(inst, 15, 8) as u8,
                op,
                addr: get_bits(inst, 39, 32) as u8,
                data0: get_bits(inst, 47, 40) as u8,
                data1: get_bits(inst, 55, 48) as u8,
                vdst: get_bits(inst, 63, 56) as u8,
            }),
            size,
        ))
    } else {
        Err(())
    }
}
